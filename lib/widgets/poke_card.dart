import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:pokedex/models/pokemon.dart';

List<String> listaPokemon = [];
List<int> listaIds = [];
// List<Pokemon> listaPokemon = [];
int ids = 0;
String nombre = "";

class PokeCard extends StatefulWidget {
  const PokeCard({Key? key}) : super(key: key);

  @override
  State<PokeCard> createState() => _PokeCardState();
}

class _PokeCardState extends State<PokeCard> {
  // late Future<List<Pokemon>> futurePokemon;
  late Future<List<String>> futurePokemon;

  // Future<List<Pokemon>> fetchData() async {
  Future<List<String>> fetchData() async {
    final response = await http
        .get(Uri.parse('https://pokeapi.co/api/v2/pokemon?limit=151'));

    if (response.statusCode == 200) {
      print("Conectado a api");
      String body = utf8.decode(response.bodyBytes);
      final jsonData = jsonDecode(body);

      for (var item in jsonData["results"]) {
        nombre = item["name"];
        ids += 1;
        print(ids);
        // listaPokemon.add(Pokemon(name: item["name"], id: ids));
        listaPokemon.add(nombre);
        listaIds.add(ids);
      }

      // for (int i = 0; i < listaPokemon.length; i++) {
      //   ids += 1;
      //   print(ids);
      //   listaIds.add(ids);
      // }

      return listaPokemon;
      // return Autogenerated.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Ocurrrio un error al cargar pokemon');
    }
  }

  @override
  void initState() {
    super.initState();
    futurePokemon = fetchData();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: futurePokemon,
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          String datos = snapshot.data.toString();
          String datos2 = datos.replaceAll("[", "").replaceAll("]", "");
          // final List<Pokemon> p = datos2.split(', ');
          final List<String> p = datos2.split(', ');
          return GridView.count(
              // crossAxisCount: 2, children: _listaPokemon(snapshot.data);
              crossAxisCount: 2,
              children: _listaPokemon(p));
        } else if (snapshot.hasError) {
          return Text('${snapshot.error}');
        }

        return const CircularProgressIndicator();
      },
    );
  }
}

getIndexId(String nombre) {
  int indice = listaPokemon.indexOf(nombre);
  return indice;
}

// List<Widget> _listaPokemon(List<Pokemon> data) {
List<Widget> _listaPokemon(List<String> data) {
  List<Widget> pokemons = [];

  data.asMap().forEach((indice, name) => pokemons.add(Card(
        child: Container(
          alignment: Alignment.center,
          width: 5,
          height: 200,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(10),
            color: Color.fromARGB(255, 141, 141, 141),
          ),
          child: Column(children: [
            Padding(
                padding: EdgeInsets.all(10),
                child: Column(children: [
                  Image.network(
                      "https://raw.githubusercontent.com/PokeAPI/sprites/f301664fbbce6ccbe09f9561287e05653379f870/sprites/pokemon/${indice + 1}.png"),
                  // 
                  SizedBox(height:17),
                  // 
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(name,
                          style: TextStyle(color: Colors.white, fontSize: 20)),
                          // 
                      Text("#${indice + 1}",
                          style: TextStyle(color: Colors.white, fontSize: 20)),
                    ],
                  )
                ]))
          ]),
        ),
      )));
  return pokemons;
}
